{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/alt/lib/actions/index.js","node_modules/alt/lib/functions.js","node_modules/alt/lib/index.js","node_modules/alt/lib/store/AltStore.js","node_modules/alt/lib/store/StoreMixin.js","node_modules/alt/lib/store/index.js","node_modules/alt/lib/utils/AltUtils.js","node_modules/alt/lib/utils/StateFunctions.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/fbjs/lib/invariant.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/is-promise/index.js","node_modules/process/browser.js","node_modules/transmitter/dist/transmitter.js","node_modules/warning/browser.js","source/client/actions/FooterActions.js","source/client/actions/FormActions.js","source/client/actions/HomeActions.js","source/client/actions/MovieAddActions.js","source/client/actions/NavbarActions.js","source/client/actions/UserActions.js","source/client/alt.js","source/client/components/App.js","source/client/components/Footer.js","source/client/components/Home.js","source/client/components/MovieAdd.js","source/client/components/Navbar.js","source/client/components/UserProfile.js","source/client/components/UserRegister.js","source/client/components/form/Form.js","source/client/components/form/RadioElement.js","source/client/components/form/RadioGroup.js","source/client/components/form/Submit.js","source/client/components/form/TextGroup.js","source/client/components/sub-components/MovieCard.js","source/client/components/sub-components/MovieCommentsPanel.js","source/client/components/sub-components/MovieInfo.js","source/client/components/sub-components/MoviePanelsToggle.js","source/client/components/sub-components/MoviePoster.js","source/client/components/sub-components/MovieVotePanel.js","source/client/components/sub-components/NavbarUserMenu.js","source/client/components/sub-components/UserInfo.js","source/client/components/sub-components/UserRatedMovies.js","source/client/components/sub-components/UserRatedMoviesPanel.js","source/client/components/sub-components/UserReviews.js","source/client/components/sub-components/UserReviewsPanel.js","source/client/main.js","source/client/routes.js","source/client/stores/FooterStore.js","source/client/stores/FormStore.js","source/client/stores/HomeStore.js","source/client/stores/MovieAddStore.js","source/client/stores/NavbarStore.js","source/client/stores/UserStore.js","source/client/utilities/Helpers.js","source/client/utilities/RequesterTMDB.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxjnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChtOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5DA;;;;;;;;IAEM,a;AACF,6BAAc;AAAA;;AACV,aAAK,eAAL,CACI,4BADJ;AAGH;;;;8CAEqB;AAAA;;AAClB,gBAAI,UAAU;AACV,wBAAQ,KADE;AAEV,qBAAK;AAFK,aAAd;AAIA,cAAE,IAAF,CAAO,OAAP,EACK,IADL,CACU;AAAA,uBAAQ,MAAK,0BAAL,CAAgC,IAAhC,CAAR;AAAA,aADV;;AAGA,mBAAO,IAAP;AACH;;;;;;kBAGU,cAAI,aAAJ,CAAkB,aAAlB,C;;;;;;;;;ACrBf;;;;;;;;IAEM,W,GACJ,uBAAe;AAAA;;AACb,OAAK,eAAL,CACE,sBADF,EAEE,sBAFF,EAGE,+BAHF,EAIE,uBAJF,EAKE,sBALF,EAME,iBANF,EAOE,oBAPF,EAQE,wBARF,EASE,wBATF;AAWD,C;;kBAGY,cAAI,aAAJ,CAAkB,WAAlB,C;;;;;;;;;;;AClBf;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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = makeAction;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _isPromise = require('is-promise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction makeAction(alt, namespace, name, implementation, obj) {\n  var id = utils.uid(alt._actionsRegistry, String(namespace) + '.' + String(name));\n  alt._actionsRegistry[id] = 1;\n\n  var data = { id: id, namespace: namespace, name: name };\n\n  var dispatch = function dispatch(payload) {\n    return alt.dispatch(id, payload, data);\n  };\n\n  // the action itself\n  var action = function action() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var invocationResult = implementation.apply(obj, args);\n    var actionResult = invocationResult;\n\n    // async functions that return promises should not be dispatched\n    if (invocationResult !== undefined && !(0, _isPromise2['default'])(invocationResult)) {\n      if (fn.isFunction(invocationResult)) {\n        // inner function result should be returned as an action result\n        actionResult = invocationResult(dispatch, alt);\n      } else {\n        dispatch(invocationResult);\n      }\n    }\n\n    if (invocationResult === undefined) {\n      utils.warn('An action was called but nothing was dispatched');\n    }\n\n    return actionResult;\n  };\n  action.defer = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return setTimeout(function () {\n      return action.apply(null, args);\n    });\n  };\n  action.id = id;\n  action.data = data;\n\n  // ensure each reference is unique in the namespace\n  var container = alt.actions[namespace];\n  var namespaceId = utils.uid(container, name);\n  container[namespaceId] = action;\n\n  // generate a constant\n  var constant = utils.formatAsConstant(namespaceId);\n  container[constant] = id;\n\n  return action;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMutableObject = isMutableObject;\nexports.eachObject = eachObject;\nexports.assign = assign;\nvar isFunction = exports.isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\n\nfunction isMutableObject(target) {\n  var Ctor = target.constructor;\n\n  return !!target && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && !Object.isFrozen(target) && (Ctor instanceof Ctor || target.type === 'AltStore');\n}\n\nfunction eachObject(f, o) {\n  o.forEach(function (from) {\n    Object.keys(Object(from)).forEach(function (key) {\n      f(key, from[key]);\n    });\n  });\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    source[_key - 1] = arguments[_key];\n  }\n\n  eachObject(function (key, value) {\n    return target[key] = value;\n  }, source);\n  return target;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _flux = require('flux');\n\nvar _StateFunctions = require('./utils/StateFunctions');\n\nvar StateFunctions = _interopRequireWildcard(_StateFunctions);\n\nvar _functions = require('./functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _store = require('./store');\n\nvar store = _interopRequireWildcard(_store);\n\nvar _AltUtils = require('./utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _actions = require('./actions');\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /* global window */\n\n\nvar Alt = function () {\n  function Alt() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, Alt);\n\n    this.config = config;\n    this.serialize = config.serialize || JSON.stringify;\n    this.deserialize = config.deserialize || JSON.parse;\n    this.dispatcher = config.dispatcher || new _flux.Dispatcher();\n    this.batchingFunction = config.batchingFunction || function (callback) {\n      return callback();\n    };\n    this.actions = { global: {} };\n    this.stores = {};\n    this.storeTransforms = config.storeTransforms || [];\n    this.trapAsync = false;\n    this._actionsRegistry = {};\n    this._initSnapshot = {};\n    this._lastSnapshot = {};\n  }\n\n  Alt.prototype.dispatch = function () {\n    function dispatch(action, data, details) {\n      var _this = this;\n\n      this.batchingFunction(function () {\n        var id = Math.random().toString(18).substr(2, 16);\n\n        // support straight dispatching of FSA-style actions\n        if (action.hasOwnProperty('type') && action.hasOwnProperty('payload')) {\n          var fsaDetails = {\n            id: action.type,\n            namespace: action.type,\n            name: action.type\n          };\n          return _this.dispatcher.dispatch(utils.fsa(id, action.type, action.payload, fsaDetails));\n        }\n\n        if (action.id && action.dispatch) {\n          return utils.dispatch(id, action, data, _this);\n        }\n\n        return _this.dispatcher.dispatch(utils.fsa(id, action, data, details));\n      });\n    }\n\n    return dispatch;\n  }();\n\n  Alt.prototype.createUnsavedStore = function () {\n    function createUnsavedStore(StoreModel) {\n      var key = StoreModel.displayName || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n    }\n\n    return createUnsavedStore;\n  }();\n\n  Alt.prototype.createStore = function () {\n    function createStore(StoreModel, iden) {\n      var key = iden || StoreModel.displayName || StoreModel.name || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      /* istanbul ignore next */\n      if (module.hot) delete this.stores[key];\n\n      if (this.stores[key] || !key) {\n        if (this.stores[key]) {\n          utils.warn('A store named ' + String(key) + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');\n        } else {\n          utils.warn('Store name was not specified');\n        }\n\n        key = utils.uid(this.stores, key);\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n\n      this.stores[key] = storeInstance;\n      StateFunctions.saveInitialSnapshot(this, key);\n\n      return storeInstance;\n    }\n\n    return createStore;\n  }();\n\n  Alt.prototype.generateActions = function () {\n    function generateActions() {\n      var actions = { name: 'global' };\n\n      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        actionNames[_key3] = arguments[_key3];\n      }\n\n      return this.createActions(actionNames.reduce(function (obj, action) {\n        obj[action] = utils.dispatchIdentity;\n        return obj;\n      }, actions));\n    }\n\n    return generateActions;\n  }();\n\n  Alt.prototype.createAction = function () {\n    function createAction(name, implementation, obj) {\n      return (0, _actions2['default'])(this, 'global', name, implementation, obj);\n    }\n\n    return createAction;\n  }();\n\n  Alt.prototype.createActions = function () {\n    function createActions(ActionsClass) {\n      var _this3 = this;\n\n      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var actions = {};\n      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');\n\n      if (fn.isFunction(ActionsClass)) {\n        fn.assign(actions, utils.getPrototypeChain(ActionsClass));\n\n        var ActionsGenerator = function (_ActionsClass) {\n          _inherits(ActionsGenerator, _ActionsClass);\n\n          function ActionsGenerator() {\n            _classCallCheck(this, ActionsGenerator);\n\n            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n\n            return _possibleConstructorReturn(this, _ActionsClass.call.apply(_ActionsClass, [this].concat(args)));\n          }\n\n          ActionsGenerator.prototype.generateActions = function () {\n            function generateActions() {\n              for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                actionNames[_key6] = arguments[_key6];\n              }\n\n              actionNames.forEach(function (actionName) {\n                actions[actionName] = utils.dispatchIdentity;\n              });\n            }\n\n            return generateActions;\n          }();\n\n          return ActionsGenerator;\n        }(ActionsClass);\n\n        for (var _len4 = arguments.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n          argsForConstructor[_key4 - 2] = arguments[_key4];\n        }\n\n        fn.assign(actions, new (Function.prototype.bind.apply(ActionsGenerator, [null].concat(argsForConstructor)))());\n      } else {\n        fn.assign(actions, ActionsClass);\n      }\n\n      this.actions[key] = this.actions[key] || {};\n\n      fn.eachObject(function (actionName, action) {\n        if (!fn.isFunction(action)) {\n          exportObj[actionName] = action;\n          return;\n        }\n\n        // create the action\n        exportObj[actionName] = (0, _actions2['default'])(_this3, key, actionName, action, exportObj);\n\n        // generate a constant\n        var constant = utils.formatAsConstant(actionName);\n        exportObj[constant] = exportObj[actionName].id;\n      }, [actions]);\n\n      return exportObj;\n    }\n\n    return createActions;\n  }();\n\n  Alt.prototype.takeSnapshot = function () {\n    function takeSnapshot() {\n      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        storeNames[_key7] = arguments[_key7];\n      }\n\n      var state = StateFunctions.snapshot(this, storeNames);\n      fn.assign(this._lastSnapshot, state);\n      return this.serialize(state);\n    }\n\n    return takeSnapshot;\n  }();\n\n  Alt.prototype.rollback = function () {\n    function rollback() {\n      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {\n        storeInst.lifecycle('rollback');\n        storeInst.emitChange();\n      });\n    }\n\n    return rollback;\n  }();\n\n  Alt.prototype.recycle = function () {\n    function recycle() {\n      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        storeNames[_key8] = arguments[_key8];\n      }\n\n      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;\n\n      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {\n        storeInst.lifecycle('init');\n        storeInst.emitChange();\n      });\n    }\n\n    return recycle;\n  }();\n\n  Alt.prototype.flush = function () {\n    function flush() {\n      var state = this.serialize(StateFunctions.snapshot(this));\n      this.recycle();\n      return state;\n    }\n\n    return flush;\n  }();\n\n  Alt.prototype.bootstrap = function () {\n    function bootstrap(data) {\n      StateFunctions.setAppState(this, data, function (storeInst, state) {\n        storeInst.lifecycle('bootstrap', state);\n        storeInst.emitChange();\n      });\n    }\n\n    return bootstrap;\n  }();\n\n  Alt.prototype.prepare = function () {\n    function prepare(storeInst, payload) {\n      var data = {};\n      if (!storeInst.displayName) {\n        throw new ReferenceError('Store provided does not have a name');\n      }\n      data[storeInst.displayName] = payload;\n      return this.serialize(data);\n    }\n\n    return prepare;\n  }();\n\n  // Instance type methods for injecting alt into your application as context\n\n  Alt.prototype.addActions = function () {\n    function addActions(name, ActionsClass) {\n      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n        args[_key9 - 2] = arguments[_key9];\n      }\n\n      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));\n    }\n\n    return addActions;\n  }();\n\n  Alt.prototype.addStore = function () {\n    function addStore(name, StoreModel) {\n      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n        args[_key10 - 2] = arguments[_key10];\n      }\n\n      this.createStore.apply(this, [StoreModel, name].concat(args));\n    }\n\n    return addStore;\n  }();\n\n  Alt.prototype.getActions = function () {\n    function getActions(name) {\n      return this.actions[name];\n    }\n\n    return getActions;\n  }();\n\n  Alt.prototype.getStore = function () {\n    function getStore(name) {\n      return this.stores[name];\n    }\n\n    return getStore;\n  }();\n\n  Alt.debug = function () {\n    function debug(name, alt, win) {\n      var key = 'alt.js.org';\n      var context = win;\n      if (!context && typeof window !== 'undefined') {\n        context = window;\n      }\n      if (typeof context !== 'undefined') {\n        context[key] = context[key] || [];\n        context[key].push({ name: name, alt: alt });\n      }\n      return alt;\n    }\n\n    return debug;\n  }();\n\n  return Alt;\n}();\n\nexports['default'] = Alt;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AltStore = function () {\n  function AltStore(alt, model, state, StoreModel) {\n    var _this = this;\n\n    _classCallCheck(this, AltStore);\n\n    var lifecycleEvents = model.lifecycleEvents;\n    this.transmitter = (0, _transmitter2['default'])();\n    this.lifecycle = function (event, x) {\n      if (lifecycleEvents[event]) lifecycleEvents[event].publish(x);\n    };\n    this.state = state;\n\n    this.alt = alt;\n    this.preventDefault = false;\n    this.displayName = model.displayName;\n    this.boundListeners = model.boundListeners;\n    this.StoreModel = StoreModel;\n    this.reduce = model.reduce || function (x) {\n      return x;\n    };\n    this.subscriptions = [];\n\n    var output = model.output || function (x) {\n      return x;\n    };\n\n    this.emitChange = function () {\n      return _this.transmitter.publish(output(_this.state));\n    };\n\n    var handleDispatch = function handleDispatch(f, payload) {\n      try {\n        return f();\n      } catch (e) {\n        if (model.handlesOwnErrors) {\n          _this.lifecycle('error', {\n            error: e,\n            payload: payload,\n            state: _this.state\n          });\n          return false;\n        }\n\n        throw e;\n      }\n    };\n\n    fn.assign(this, model.publicMethods);\n\n    // Register dispatcher\n    this.dispatchToken = alt.dispatcher.register(function (payload) {\n      _this.preventDefault = false;\n\n      _this.lifecycle('beforeEach', {\n        payload: payload,\n        state: _this.state\n      });\n\n      var actionHandlers = model.actionListeners[payload.action];\n\n      if (actionHandlers || model.otherwise) {\n        var result = void 0;\n\n        if (actionHandlers) {\n          result = handleDispatch(function () {\n            return actionHandlers.filter(Boolean).every(function (handler) {\n              return handler.call(model, payload.data, payload.action) !== false;\n            });\n          }, payload);\n        } else {\n          result = handleDispatch(function () {\n            return model.otherwise(payload.data, payload.action);\n          }, payload);\n        }\n\n        if (result !== false && !_this.preventDefault) _this.emitChange();\n      }\n\n      if (model.reduce) {\n        handleDispatch(function () {\n          var value = model.reduce(_this.state, payload);\n          if (value !== undefined) _this.state = value;\n        }, payload);\n        if (!_this.preventDefault) _this.emitChange();\n      }\n\n      _this.lifecycle('afterEach', {\n        payload: payload,\n        state: _this.state\n      });\n    });\n\n    this.lifecycle('init');\n  }\n\n  AltStore.prototype.listen = function () {\n    function listen(cb) {\n      var _this2 = this;\n\n      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');\n\n      var _transmitter$subscrib = this.transmitter.subscribe(cb);\n\n      var dispose = _transmitter$subscrib.dispose;\n\n      this.subscriptions.push({ cb: cb, dispose: dispose });\n      return function () {\n        _this2.lifecycle('unlisten');\n        dispose();\n      };\n    }\n\n    return listen;\n  }();\n\n  AltStore.prototype.unlisten = function () {\n    function unlisten(cb) {\n      this.lifecycle('unlisten');\n      this.subscriptions.filter(function (subscription) {\n        return subscription.cb === cb;\n      }).forEach(function (subscription) {\n        return subscription.dispose();\n      });\n    }\n\n    return unlisten;\n  }();\n\n  AltStore.prototype.getState = function () {\n    function getState() {\n      return this.StoreModel.config.getState.call(this, this.state);\n    }\n\n    return getState;\n  }();\n\n  return AltStore;\n}();\n\nexports['default'] = AltStore;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar StoreMixin = {\n  waitFor: function () {\n    function waitFor() {\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      if (!sources.length) {\n        throw new ReferenceError('Dispatch tokens not provided');\n      }\n\n      var sourcesArray = sources;\n      if (sources.length === 1) {\n        sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;\n      }\n\n      var tokens = sourcesArray.map(function (source) {\n        return source.dispatchToken || source;\n      });\n\n      this.dispatcher.waitFor(tokens);\n    }\n\n    return waitFor;\n  }(),\n  exportAsync: function () {\n    function exportAsync(asyncMethods) {\n      this.registerAsync(asyncMethods);\n    }\n\n    return exportAsync;\n  }(),\n  registerAsync: function () {\n    function registerAsync(asyncDef) {\n      var _this = this;\n\n      var loadCounter = 0;\n\n      var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;\n\n      var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {\n        var desc = asyncMethods[methodName];\n        var spec = fn.isFunction(desc) ? desc(_this) : desc;\n\n        var validHandlers = ['success', 'error', 'loading'];\n        validHandlers.forEach(function (handler) {\n          if (spec[handler] && !spec[handler].id) {\n            throw new Error(String(handler) + ' handler must be an action function');\n          }\n        });\n\n        publicMethods[methodName] = function () {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          var state = _this.getInstance().getState();\n          var value = spec.local && spec.local.apply(spec, [state].concat(args));\n          var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))\n          /*eslint-disable*/\n          : value == null;\n          /*eslint-enable*/\n          var intercept = spec.interceptResponse || function (x) {\n            return x;\n          };\n\n          var makeActionHandler = function () {\n            function makeActionHandler(action, isError) {\n              return function (x) {\n                var fire = function () {\n                  function fire() {\n                    loadCounter -= 1;\n                    action(intercept(x, action, args));\n                    if (isError) throw x;\n                    return x;\n                  }\n\n                  return fire;\n                }();\n                return _this.alt.trapAsync ? function () {\n                  return fire();\n                } : fire();\n              };\n            }\n\n            return makeActionHandler;\n          }();\n\n          // if we don't have it in cache then fetch it\n          if (shouldFetch) {\n            loadCounter += 1;\n            /* istanbul ignore else */\n            if (spec.loading) spec.loading(intercept(null, spec.loading, args));\n            return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));\n          }\n\n          // otherwise emit the change now\n          _this.emitChange();\n          return value;\n        };\n\n        return publicMethods;\n      }, {});\n\n      this.exportPublicMethods(toExport);\n      this.exportPublicMethods({\n        isLoading: function () {\n          function isLoading() {\n            return loadCounter > 0;\n          }\n\n          return isLoading;\n        }()\n      });\n    }\n\n    return registerAsync;\n  }(),\n  exportPublicMethods: function () {\n    function exportPublicMethods(methods) {\n      var _this2 = this;\n\n      fn.eachObject(function (methodName, value) {\n        if (!fn.isFunction(value)) {\n          throw new TypeError('exportPublicMethods expects a function');\n        }\n\n        _this2.publicMethods[methodName] = value;\n      }, [methods]);\n    }\n\n    return exportPublicMethods;\n  }(),\n  emitChange: function () {\n    function emitChange() {\n      this.getInstance().emitChange();\n    }\n\n    return emitChange;\n  }(),\n  on: function () {\n    function on(lifecycleEvent, handler) {\n      if (lifecycleEvent === 'error') this.handlesOwnErrors = true;\n      var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2['default'])();\n      this.lifecycleEvents[lifecycleEvent] = bus;\n      return bus.subscribe(handler.bind(this));\n    }\n\n    return on;\n  }(),\n  bindAction: function () {\n    function bindAction(symbol, handler) {\n      if (!symbol) {\n        throw new ReferenceError('Invalid action reference passed in');\n      }\n      if (!fn.isFunction(handler)) {\n        throw new TypeError('bindAction expects a function');\n      }\n\n      // You can pass in the constant or the function itself\n      var key = symbol.id ? symbol.id : symbol;\n      this.actionListeners[key] = this.actionListeners[key] || [];\n      this.actionListeners[key].push(handler.bind(this));\n      this.boundListeners.push(key);\n    }\n\n    return bindAction;\n  }(),\n  bindActions: function () {\n    function bindActions(actions) {\n      var _this3 = this;\n\n      fn.eachObject(function (action, symbol) {\n        var matchFirstCharacter = /./;\n        var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {\n          return 'on' + String(x[0].toUpperCase());\n        });\n\n        if (_this3[action] && _this3[assumedEventHandler]) {\n          // If you have both action and onAction\n          throw new ReferenceError('You have multiple action handlers bound to an action: ' + (String(action) + ' and ' + String(assumedEventHandler)));\n        }\n\n        var handler = _this3[action] || _this3[assumedEventHandler];\n        if (handler) {\n          _this3.bindAction(symbol, handler);\n        }\n      }, [actions]);\n    }\n\n    return bindActions;\n  }(),\n  bindListeners: function () {\n    function bindListeners(obj) {\n      var _this4 = this;\n\n      fn.eachObject(function (methodName, symbol) {\n        var listener = _this4[methodName];\n\n        if (!listener) {\n          throw new ReferenceError(String(methodName) + ' defined but does not exist in ' + String(_this4.displayName));\n        }\n\n        if (Array.isArray(symbol)) {\n          symbol.forEach(function (action) {\n            _this4.bindAction(action, listener);\n          });\n        } else {\n          _this4.bindAction(symbol, listener);\n        }\n      }, [obj]);\n    }\n\n    return bindListeners;\n  }()\n};\n\nexports['default'] = StoreMixin;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStoreConfig = createStoreConfig;\nexports.transformStore = transformStore;\nexports.createStoreFromObject = createStoreFromObject;\nexports.createStoreFromClass = createStoreFromClass;\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltStore = require('./AltStore');\n\nvar _AltStore2 = _interopRequireDefault(_AltStore);\n\nvar _StoreMixin = require('./StoreMixin');\n\nvar _StoreMixin2 = _interopRequireDefault(_StoreMixin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction doSetState(store, storeInstance, state) {\n  if (!state) {\n    return;\n  }\n\n  var config = storeInstance.StoreModel.config;\n\n\n  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;\n\n  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);\n\n  if (!store.alt.dispatcher.isDispatching()) {\n    store.emitChange();\n  }\n}\n\nfunction createPrototype(proto, alt, key, extras) {\n  return fn.assign(proto, _StoreMixin2['default'], {\n    displayName: key,\n    alt: alt,\n    dispatcher: alt.dispatcher,\n    preventDefault: function () {\n      function preventDefault() {\n        this.getInstance().preventDefault = true;\n      }\n\n      return preventDefault;\n    }(),\n\n    boundListeners: [],\n    lifecycleEvents: {},\n    actionListeners: {},\n    publicMethods: {},\n    handlesOwnErrors: false\n  }, extras);\n}\n\nfunction createStoreConfig(globalConfig, StoreModel) {\n  StoreModel.config = fn.assign({\n    getState: function () {\n      function getState(state) {\n        if (Array.isArray(state)) {\n          return state.slice();\n        } else if (fn.isMutableObject(state)) {\n          return fn.assign({}, state);\n        }\n\n        return state;\n      }\n\n      return getState;\n    }(),\n    setState: function () {\n      function setState(currentState, nextState) {\n        if (fn.isMutableObject(nextState)) {\n          return fn.assign(currentState, nextState);\n        }\n        return nextState;\n      }\n\n      return setState;\n    }()\n  }, globalConfig, StoreModel.config);\n}\n\nfunction transformStore(transforms, StoreModel) {\n  return transforms.reduce(function (Store, transform) {\n    return transform(Store);\n  }, StoreModel);\n}\n\nfunction createStoreFromObject(alt, StoreModel, key) {\n  var storeInstance = void 0;\n\n  var StoreProto = createPrototype({}, alt, key, fn.assign({\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  }, StoreModel));\n\n  // bind the store listeners\n  /* istanbul ignore else */\n  if (StoreProto.bindListeners) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.bindListeners);\n  }\n  /* istanbul ignore else */\n  if (StoreProto.observe) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.observe(alt));\n  }\n\n  // bind the lifecycle events\n  /* istanbul ignore else */\n  if (StoreProto.lifecycle) {\n    fn.eachObject(function (eventName, event) {\n      _StoreMixin2['default'].on.call(StoreProto, eventName, event);\n    }, [StoreProto.lifecycle]);\n  }\n\n  // create the instance and fn.assign the public methods to the instance\n  storeInstance = fn.assign(new _AltStore2['default'](alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, {\n    displayName: key,\n    config: StoreModel.config\n  });\n\n  return storeInstance;\n}\n\nfunction createStoreFromClass(alt, StoreModel, key) {\n  var storeInstance = void 0;\n  var config = StoreModel.config;\n\n  // Creating a class here so we don't overload the provided store's\n  // prototype with the mixin behaviour and I'm extending from StoreModel\n  // so we can inherit any extensions from the provided store.\n\n  var Store = function (_StoreModel) {\n    _inherits(Store, _StoreModel);\n\n    function Store() {\n      _classCallCheck(this, Store);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _possibleConstructorReturn(this, _StoreModel.call.apply(_StoreModel, [this].concat(args)));\n    }\n\n    return Store;\n  }(StoreModel);\n\n  createPrototype(Store.prototype, alt, key, {\n    type: 'AltStore',\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  });\n\n  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    argsForClass[_key - 3] = arguments[_key];\n  }\n\n  var store = new (Function.prototype.bind.apply(Store, [null].concat(argsForClass)))();\n\n  /* istanbul ignore next */\n  if (config.bindListeners) store.bindListeners(config.bindListeners);\n  /* istanbul ignore next */\n  if (config.datasource) store.registerAsync(config.datasource);\n\n  storeInstance = fn.assign(new _AltStore2['default'](alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });\n\n  return storeInstance;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.getInternalMethods = getInternalMethods;\nexports.getPrototypeChain = getPrototypeChain;\nexports.warn = warn;\nexports.uid = uid;\nexports.formatAsConstant = formatAsConstant;\nexports.dispatchIdentity = dispatchIdentity;\nexports.fsa = fsa;\nexports.dispatch = dispatch;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/*eslint-disable*/\nvar builtIns = Object.getOwnPropertyNames(NoopClass);\nvar builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);\n/*eslint-enable*/\n\nfunction getInternalMethods(Obj, isProto) {\n  var excluded = isProto ? builtInProto : builtIns;\n  var obj = isProto ? Obj.prototype : Obj;\n  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {\n    if (excluded.indexOf(m) !== -1) {\n      return value;\n    }\n\n    value[m] = obj[m];\n    return value;\n  }, {});\n}\n\nfunction getPrototypeChain(Obj) {\n  var methods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  return Obj === Function.prototype ? methods : getPrototypeChain(Object.getPrototypeOf(Obj), fn.assign(getInternalMethods(Obj, true), methods));\n}\n\nfunction warn(msg) {\n  /* istanbul ignore else */\n  /*eslint-disable*/\n  if (typeof console !== 'undefined') {\n    console.warn(new ReferenceError(msg));\n  }\n  /*eslint-enable*/\n}\n\nfunction uid(container, name) {\n  var count = 0;\n  var key = name;\n  while (Object.hasOwnProperty.call(container, key)) {\n    key = name + String(++count);\n  }\n  return key;\n}\n\nfunction formatAsConstant(name) {\n  return name.replace(/[a-z]([A-Z])/g, function (i) {\n    return String(i[0]) + '_' + String(i[1].toLowerCase());\n  }).toUpperCase();\n}\n\nfunction dispatchIdentity(x) {\n  if (x === undefined) return null;\n\n  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    a[_key - 1] = arguments[_key];\n  }\n\n  return a.length ? [x].concat(a) : x;\n}\n\nfunction fsa(id, type, payload, details) {\n  return {\n    type: type,\n    payload: payload,\n    meta: _extends({\n      dispatchId: id\n    }, details),\n\n    id: id,\n    action: type,\n    data: payload,\n    details: details\n  };\n}\n\nfunction dispatch(id, actionObj, payload, alt) {\n  var data = actionObj.dispatch(payload);\n  if (data === undefined) return null;\n\n  var type = actionObj.id;\n  var namespace = type;\n  var name = type;\n  var details = { id: type, namespace: namespace, name: name };\n\n  var dispatchLater = function dispatchLater(x) {\n    return alt.dispatch(type, x, details);\n  };\n\n  if (fn.isFunction(data)) return data(dispatchLater, alt);\n\n  // XXX standardize this\n  return alt.dispatcher.dispatch(fsa(id, type, data, details));\n}\n\n/* istanbul ignore next */\nfunction NoopClass() {}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setAppState = setAppState;\nexports.snapshot = snapshot;\nexports.saveInitialSnapshot = saveInitialSnapshot;\nexports.filterSnapshots = filterSnapshots;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction setAppState(instance, data, onStore) {\n  var obj = instance.deserialize(data);\n  fn.eachObject(function (key, value) {\n    var store = instance.stores[key];\n    if (store) {\n      (function () {\n        var config = store.StoreModel.config;\n\n        var state = store.state;\n        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;\n        if (fn.isMutableObject(state)) {\n          fn.eachObject(function (k) {\n            return delete state[k];\n          }, [state]);\n          fn.assign(state, obj[key]);\n        } else {\n          store.state = obj[key];\n        }\n        onStore(store, store.state);\n      })();\n    }\n  }, [obj]);\n}\n\nfunction snapshot(instance) {\n  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);\n  return stores.reduce(function (obj, storeHandle) {\n    var storeName = storeHandle.displayName || storeHandle;\n    var store = instance.stores[storeName];\n    var config = store.StoreModel.config;\n\n    store.lifecycle('snapshot');\n    var customSnapshot = config.onSerialize && config.onSerialize(store.state);\n    obj[storeName] = customSnapshot ? customSnapshot : store.getState();\n    return obj;\n  }, {});\n}\n\nfunction saveInitialSnapshot(instance, key) {\n  var state = instance.deserialize(instance.serialize(instance.stores[key].state));\n  instance._initSnapshot[key] = state;\n  instance._lastSnapshot[key] = state;\n}\n\nfunction filterSnapshots(instance, state, stores) {\n  return stores.reduce(function (obj, store) {\n    var storeName = store.displayName || store;\n    if (!state[storeName]) {\n      throw new ReferenceError(String(storeName) + ' is not a valid store');\n    }\n    obj[storeName] = state[storeName];\n    return obj;\n  }, {});\n}","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function (condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nmodule.exports.Dispatcher = require('./lib/Dispatcher');\n","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * \n * @preventMunge\n */\n\n'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *         case 'city-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\n\nvar Dispatcher = (function () {\n  function Dispatcher() {\n    _classCallCheck(this, Dispatcher);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n\n  Dispatcher.prototype.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  };\n\n  /**\n   * Removes a callback based on its token.\n   */\n\n  Dispatcher.prototype.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n    delete this._callbacks[id];\n  };\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\n        continue;\n      }\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n      this._invokeCallback(id);\n    }\n  };\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\n    this._startDispatching(payload);\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  };\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n\n  Dispatcher.prototype.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  };\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  };\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  };\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n})();\n\nmodule.exports = Dispatcher;","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n\nfunction transmitter() {\n  var subscriptions = [];\n  var nowDispatching = false;\n  var toUnsubscribe = {};\n\n  var unsubscribe = function unsubscribe(onChange) {\n    var id = subscriptions.indexOf(onChange);\n    if (id < 0) return;\n    if (nowDispatching) {\n      toUnsubscribe[id] = onChange;\n      return;\n    }\n    subscriptions.splice(id, 1);\n  };\n\n  var subscribe = function subscribe(onChange) {\n    var id = subscriptions.push(onChange);\n    var dispose = function dispose() {\n      return unsubscribe(onChange);\n    };\n    return { dispose: dispose };\n  };\n\n  var publish = function publish() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    nowDispatching = true;\n    try {\n      subscriptions.forEach(function (subscription, id) {\n        return toUnsubscribe[id] || subscription.apply(undefined, args);\n      });\n    } finally {\n      nowDispatching = false;\n      Object.keys(toUnsubscribe).forEach(function (id) {\n        return unsubscribe(toUnsubscribe[id]);\n      });\n      toUnsubscribe = {};\n    }\n  };\n\n  return {\n    publish: publish,\n    subscribe: subscribe,\n    $subscriptions: subscriptions\n  };\n}\n\nmodule.exports = transmitter;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n","import alt from '../alt';\r\n\r\nclass FooterActions {\r\n    constructor() {\r\n        this.generateActions(\r\n            'getFiveRecentMoviesSuccess'\r\n        );\r\n    }\r\n\r\n    getFiveRecentMovies() {\r\n        let request = {\r\n            method: 'get',\r\n            url: '/api/movies/five-recent',\r\n        };\r\n        $.ajax(request)\r\n            .done(data => this.getFiveRecentMoviesSuccess(data));\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default alt.createActions(FooterActions);","import alt from '../alt'\r\n\r\nclass FormActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleUsernameChange',\r\n      'handlePasswordChange',\r\n      'handleConfirmedPasswordChange',\r\n      'handleFirstNameChange',\r\n      'handleLastNameChange',\r\n      'handleAgeChange',\r\n      'handleGenderChange',\r\n      'usernameValidationFail',\r\n      'passwordValidationFail'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(FormActions)\r\n","import alt from '../alt';\r\nimport TMDB from '../utilities/RequesterTMDB';\r\n\r\nclass HomeActions {\r\n    constructor() {\r\n        this.generateActions(\r\n            'getTopTenMoviesSuccess',\r\n            'getTopTenMoviesFail',\r\n        );\r\n    }\r\n\r\n    getTopTenMovies() {\r\n        let request = {\r\n            url: '/api/movies/top-ten',\r\n            method: 'get'\r\n        };\r\n        $.ajax(request)\r\n            .done(payload => {\r\n                let tmdbPromises = [];\r\n                for (let movie of payload) {\r\n                    tmdbPromises.push(TMDB.getMoviePoster(movie.name));\r\n                }\r\n\r\n                Promise.all(tmdbPromises).then((promises) => {\r\n                    let movies = [];\r\n                    for (let i = 0; i < payload.length;  i++) {\r\n                        let movieData = {\r\n                            _id: payload[i]._id,\r\n                            name: payload[i].name,\r\n                            description: payload[i].description,\r\n                            genres: payload[i].genres,\r\n                            moviePosterUrl: promises[i].posterUrl\r\n                        };\r\n                        movies.push(movieData);\r\n                    }\r\n\r\n                    this.getTopTenMoviesSuccess(movies);\r\n                });\r\n            })\r\n            .fail(err => this.getTopTenMoviesFail(err));\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default alt.createActions(HomeActions);\r\n\r\n","import alt from '../alt';\r\n\r\nclass MovieAddActions {\r\n    constructor() {\r\n        this.generateActions(\r\n            'handleNameChange',\r\n            'handleDescriptionChange',\r\n            'handleGenresChange',\r\n            'nameValidationFail',\r\n            'genresValidationFail',\r\n            'addMovieSuccess',\r\n            'addMovieFail'\r\n        );\r\n    }\r\n\r\n    addMovie(data) {\r\n        let request = {\r\n            url: '/api/movies/add',\r\n            method: 'POST',\r\n            data: JSON.stringify(data),\r\n            contentType : 'application/json'\r\n        };\r\n        $.ajax(request)\r\n            .done(() => this.addMovieSuccess())\r\n            .fail((err) => this.addMovieFail(err));\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default alt.createActions(MovieAddActions);","import alt from '../alt';\r\n\r\nclass NavbarActions {\r\n    constructor() {\r\n        this.generateActions(\r\n            'updateAjaxAnimation'\r\n        );\r\n    }\r\n}\r\n\r\nexport default alt.createActions(NavbarActions);","import alt from '../alt'\r\n\r\nclass UserActions {\r\n  constructor () {\r\n    this.generateActions(\r\n        'registerUserSuccess',\r\n        'registerUserFail',\r\n        'loginUserSuccess',\r\n        'loginUserFail',\r\n        'logoutUserSuccess'\r\n        )\r\n  }\r\n\r\n  registerUser (data) {\r\n    let request = {\r\n      url: '/user/register',\r\n      method: 'post',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n    $.ajax(request)\r\n        .done(() => this.registerUserSuccess())\r\n        .fail((err) => {\r\n          console.log('error', err)\r\n          this.registerUserFail(err.responseJSON.message)\r\n        })\r\n\r\n    return true\r\n  }\r\n\r\n  loginUser () {\r\n    let request = {\r\n      url: '/user/login',\r\n      method: 'post',\r\n      data: JSON.stringify({ username: 'admin', password: 'admin' }),\r\n      contentType: 'application/json'\r\n    }\r\n    $.ajax(request)\r\n            .done(data => this.loginUserSuccess(data))\r\n            .fail(err => this.loginUserFail(err))\r\n\r\n    return true\r\n  }\r\n\r\n  logoutUser () {\r\n    let request = {\r\n      url: '/user/logout',\r\n      method: 'post'\r\n    }\r\n    $.ajax(request)\r\n            .done(() => this.logoutUserSuccess())\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(UserActions)\r\n","import Alt from 'alt';\r\n\r\nexport default new Alt();","import React from 'react';\r\n\r\nimport UserActions from '../actions/UserActions';\r\nimport UserStore from '../stores/UserStore';\r\n\r\nimport Footer from './Footer';\r\nimport Navbar from './Navbar';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = UserStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        UserStore.listen(this.onChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        UserStore.unlisten(this.onChange);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                {this.props.children}\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router';\r\n\r\nimport FooterActions from '../actions/FooterActions';\r\nimport FooterStore from '../stores/FooterStore';\r\n\r\nexport default class Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = FooterStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        FooterStore.listen(this.onChange);\r\n\r\n        FooterActions.getFiveRecentMovies();\r\n        this.interval = setInterval(() => FooterActions.getFiveRecentMovies(), 30000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        FooterStore.unlisten(this.onChange);\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render() {\r\n        let mostRecentMovies = this.state.mostRecentMovies.map(movie => {\r\n            return (\r\n                <li key={movie._id}>\r\n                    <Link to={`/...`}>{movie.name}</Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <footer>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-sm-5'>\r\n                            <h3 className='lead'>\r\n                                <strong>Information</strong> and\r\n                                <strong> Copyright</strong>\r\n                            </h3>\r\n                            <p>\r\n                                Powered by\r\n                                <strong> Express</strong>,\r\n                                <strong> MongoDB</strong> and\r\n                                <strong> React</strong>\r\n                            </p>\r\n                            <p>© 2017 SoftUni.</p>\r\n                        </div>\r\n                        <div className='col-sm-4 hidden-xs'>\r\n                            <h3 className='lead'>\r\n                                <strong>Newest</strong>  5 Movies\r\n                            </h3>\r\n                            <ul className='list-inline'>\r\n                                {mostRecentMovies}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"col-sm-3\">\r\n                            <h3 className=\"lead\">Author</h3>\r\n                            <a href=\"https://github.com/achobanov\">\r\n                                <strong> Alex Chobanov</strong>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport HomeActions from '../actions/HomeActions';\r\nimport HomeStore from '../stores/HomeStore';\r\n\r\nimport MovieCard from './sub-components/MovieCard';\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = HomeStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        HomeStore.listen(this.onChange);\r\n\r\n        HomeActions.getTopTenMovies();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        HomeStore.unlisten(this.onChange);\r\n    }\r\n\r\n    render() {\r\n        let movies = this.state.topTenMovies.map((movie, index) => {\r\n            return (\r\n                <MovieCard key={ movie._id }\r\n                           movie={ movie }\r\n                           index={ index } />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className='container'>\r\n                <h3 className='text-center'>Welcome to\r\n                    <strong> Movie Database</strong>\r\n                </h3>\r\n                <div className=\"list-group\">\r\n                    { movies }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport MovieAddActions from '../actions/MovieAddActions';\r\nimport MovieAddStore from '../stores/MovieAddStore';\r\n\r\nexport default class AddMovie extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = MovieAddStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        MovieAddStore.listen(this.onChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MovieAddStore.unlisten(this.onChange);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let name = this.state.name.trim();\r\n        let genres = this.state.genres;\r\n        if (!name) {\r\n           MovieAddActions.nameValidationFail();\r\n        }\r\n        if (genres.length === 0) {\r\n            MovieAddActions.genresValidationFail();\r\n        }\r\n\r\n        if (name) {\r\n            let data = {\r\n                name: this.state.name,\r\n                description: this.state.description,\r\n                genres: this.state.genres,\r\n            };\r\n            MovieAddActions.addMovie(data);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <div className='row flipInX animated'>\r\n                    <div className='col-sm-8'>\r\n                        <div className='panel panel-default'>\r\n                            <div className='panel-heading'>Add Movie</div>\r\n                            <div className='panel-body'>\r\n                                <form onSubmit={  this.handleSubmit.bind(this)  }>\r\n                                    <div className={ 'form-group ' + this.state.nameValidationState }>\r\n                                        <label className='control-label'>Name</label>\r\n                                        <input type='text' className='form-control' ref='nameTextField'\r\n                                               value={ this.state.name }\r\n                                               onChange={ MovieAddActions.handleNameChange } autoFocus/>\r\n                                        <span className='help-block'>{ this.state.helpBlock }</span>\r\n                                    </div>\r\n                                    <div className='form-group'>\r\n                                        <label className='control-label'>Description</label>\r\n                                        <textarea className='form-control'\r\n                                                  rows=\"5\"\r\n                                                  value={ this.state.description }\r\n                                                  onChange={ MovieAddActions.handleDescriptionChange } />\r\n                                    </div>\r\n                                    <div className={ 'form-group ' + this.state.genresValidationState }>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='action' value='Action'\r\n                                                   checked={ this.state.genres.indexOf('Action') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='action'>Action</label>\r\n                                        </div>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='horror' value='Horror'\r\n                                                   checked={ this.state.genres.indexOf('Horror') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='horror'>Horror</label>\r\n                                        </div>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='sci-fi' value='Sci-fi'\r\n                                                   checked={ this.state.genres.indexOf('Sci-fi') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='sci-fi'>Sci-fi</label>\r\n                                        </div>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='fantasy' value='Fantasy'\r\n                                                   checked={ this.state.genres.indexOf('Fantasy') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='fantasy'>Fantasy</label>\r\n                                        </div>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='romance' value='Romance'\r\n                                                   checked={ this.state.genres.indexOf('Romance') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='romance'>Romance</label>\r\n                                        </div>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='thriller' value='Thriller'\r\n                                                   checked={ this.state.genres.indexOf('Thriller') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='thriller'>Thriller</label>\r\n                                        </div>\r\n                                        <div className='checkbox checkbox-inline'>\r\n                                            <input type='checkbox' name='genres' id='adventure' value='Adventure'\r\n                                                   checked={ this.state.genres.indexOf('Adventure') !== -1 }\r\n                                                   onChange={ MovieAddActions.handleGenresChange }/>\r\n                                            <label htmlFor='adventure'>Adventure</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button type='submit' className='btn btn-primary'>Submit</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router';\r\n\r\nimport NavbarActions from '../actions/NavbarActions';\r\nimport NavbarStore from '../stores/NavbarStore';\r\n\r\nimport NavbarUserMenu from './sub-components/NavbarUserMenu';\r\n\r\nexport default class Navbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = NavbarStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        NavbarStore.listen(this.onChange);\r\n\r\n        $(document).ajaxStart(() => NavbarActions.updateAjaxAnimation('fadeIn'));\r\n        $(document).ajaxComplete(() => NavbarActions.updateAjaxAnimation('fadeOut'));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        NavbarStore.unlisten(this.onChange);\r\n    }\r\n\r\n    render() {\r\n        let navbarUserMenu = <NavbarUserMenu userData={ this.props.userData } />;\r\n        return (\r\n            <nav className='navbar navbar-default navbar-static-top'>\r\n                <div className='navbar-header'>\r\n                    <button type='button'\r\n                            className='navbar-toggle collapsed'\r\n                            data-toggle='collapse'\r\n                            data-target='#navbar'>\r\n                        <span className='sr-only'>Toggle navigation</span>\r\n                        <span className='icon-bar'/>\r\n                        <span className='icon-bar' />\r\n                        <span className='icon-bar' />\r\n                    </button>\r\n                    <Link to='/' className='navbar-brand'>\r\n                        <span\r\n                            ref='triangles'\r\n                            className={'triangles animated ' + this.state.ajaxAnimationClass}>\r\n                            <div className='tri invert' />\r\n                            <div className='tri invert' />\r\n                            <div className='tri' />\r\n                            <div className='tri invert' />\r\n                            <div className='tri invert' />\r\n                            <div className='tri' />\r\n                            <div className='tri invert' />\r\n                            <div className='tri' />\r\n                            <div className='tri invert' />\r\n                        </span>\r\n                        MDB\r\n                    </Link>\r\n                </div>\r\n                <div id='navbar' className='navbar-collapse collapse'>\r\n                    <ul className='nav navbar-nav'>\r\n                        <li>\r\n                            <Link to='/'>Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to='/movie/add'>Add Movie</Link>\r\n                        </li>\r\n                    </ul>\r\n                    { navbarUserMenu }\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport UserStore from '../stores/UserStore';\r\nimport UserInfo from './sub-components/UserInfo';\r\nimport UserVotedMovies from './sub-components/UserRatedMovies';\r\nimport UserReviews from './sub-components/UserReviews';\r\n\r\nexport default class UserProfile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = UserStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        UserStore.listen(this.onChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        UserStore.unlisten(this.onChange);\r\n    }\r\n\r\n    render() {\r\n        let nodes = {};\r\n        nodes.roles = this.state.roles.map((role, index) => {\r\n            return (\r\n                <h4 key={ index } className='lead'>\r\n                    <strong>{ role }</strong>\r\n                </h4>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <UserInfo name={ this.state.name }\r\n                          roles={ this.state.roles }\r\n                          information={ this.state.information } />\r\n                <UserVotedMovies votes={ this.state.votes } />\r\n                <UserReviews reviews={ this.props.reviews } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport FormActions from '../actions/FooterActions'\r\nimport UserActions from '../actions/UserActions'\r\nimport FormStore from '../stores/FormStore'\r\nimport Form from './form/Form'\r\nimport TextGroup from './form/TextGroup'\r\nimport RadioGroup from './form/RadioGroup'\r\nimport RadioElement from './form/RadioElement'\r\nimport Submit from './form/Submit'\r\n\r\nexport default class UserRegister extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n    let data = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      confirmedPassword: this.state.confirmedPassword,\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName,\r\n      age: this.state.age,\r\n      gender: this.state.gender\r\n    }\r\n    if (!data.username) {\r\n      return FormActions.usernameValidationFail()\r\n    }\r\n    if (!data.password ||\r\n    !data.confirmedPassword ||\r\n    data.password !== data.confirmedPassword) {\r\n      return FormActions.passwordValidationFail()\r\n    }\r\n    UserActions.registerUser(data)\r\n  }\r\n  render () {\r\n    return (\r\n      <Form title='Register'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message}>\r\n\r\n        <TextGroup type='text'\r\n          label='Username'\r\n          value={this.state.username}\r\n          autoFocus\r\n          handleChange={FormActions.handleUsernameChange}\r\n          validationState={this.state.usernameValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup type='password'\r\n          label='Password'\r\n          value={this.state.Password}\r\n          handleChange={FormActions.handlePasswordChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup type='password'\r\n          label='Confirm Password'\r\n          value={this.state.confirmPassword}\r\n          handleChange={FormActions.handleConfirmedPasswordChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup type='text'\r\n          label='First Name'\r\n          handleChange={FormActions.handleFirstNameChange}\r\n          value={this.state.firstName} />\r\n\r\n        <TextGroup type='text'\r\n          label='Last Name'\r\n          handleChange={FormActions.handleLastNameChange}\r\n          value={this.state.lastName} />\r\n\r\n        <TextGroup type='number'\r\n          label='Age'\r\n          handleChange={FormActions.handleAgeChange}\r\n          value={this.state.age} />\r\n\r\n        <RadioGroup validationState={this.state.genderValidationState}\r\n          message={this.state.message}>\r\n          <RadioElement groupName='gender'\r\n            value='Male'\r\n            selectedValue={this.state.gender}\r\n            handleChange={FormActions.handleGenderChange} />\r\n\r\n          <RadioElement groupName='gender'\r\n            value='Female'\r\n            selectedValue={this.state.gender}\r\n            handleChange={FormActions.handleGenderChange} />\r\n        </RadioGroup>\r\n\r\n        <Submit type='btn-primary' value='Register' />\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class Form extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='container'>\r\n        <div className='row flipInX animated'>\r\n          <div className='col-sm-8'>\r\n            <div className='panel panel-default'>\r\n              <div className='panel-heading'>{ this.props.title }</div>\r\n              <div className='panel-body'>\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                  <div className={`form-group ${this.props.submitState}`}>\r\n                    <span className={`help-block`}>{ this.props.message }</span>\r\n                  </div>\r\n                  { this.props.children }\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class RadioElement extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='radio radio-inline'>\r\n        <input type='radio'\r\n          name={this.props.groupName}\r\n          id={this.props.value.toLowerCase()}\r\n          value={this.props.value}\r\n          checked={this.props.selectedValue === this.props.value}\r\n          onChange={this.props.handleChange} />\r\n        <label htmlFor={this.props.value.toLowerCase()}>{ this.props.value }</label>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class RadioGroup extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className={`form-group ${this.props.validationState}`}>\r\n        <span className='help-block'>{ this.props.message }</span>\r\n        { this.props.children }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class Submit extends React.Component {\r\n  render () {\r\n    return <input type='submit' className={`btn ${this.props.type}`} value={this.props.value} />\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class TextGroup extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className={'form-group ' + this.props.validationState}>\r\n        <label className='control-label'>{ this.props.label }</label>\r\n        <input type={this.props.type} className='form-control'\r\n          value={this.props.value}\r\n          onChange={this.props.handleChange} autoFocus={this.props.autoFocus} />\r\n        <span className='help-block'>{ this.props.message }</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from  'react';\r\n\r\nimport MoviePoster from './MoviePoster';\r\nimport MovieInfo from './MovieInfo';\r\nimport MoviePanelsToggle from './MoviePanelsToggle';\r\nimport MovieVotePanel from \"./MovieVotePanel\";\r\nimport MovieCommentsPanel from './MovieCommentsPanel';\r\n\r\nexport default class MovieCard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showVotePanel: false,\r\n            showCommentsPanel: false\r\n        }\r\n    }\r\n\r\n    toggleCommentsPanel() {\r\n        this.setState(prevState => ({\r\n            showCommentsPanel: !prevState.showCommentsPanel,\r\n            showVotePanel: false\r\n        }));\r\n    }\r\n\r\n    toggleVotePanel() {\r\n        this.setState(prevState =>  ({\r\n            showVotePanel: !prevState.showVotePanel,\r\n            showCommentsPanel: false\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='animated fadeIn'>\r\n                <div className='media movie'>\r\n                    <span className='position pull-left'>{ this.props.index + 1 }</span>\r\n                    <MoviePoster posterUrl={ this.props.movie.moviePosterUrl } />\r\n                    <MovieInfo movie={ this.props.movie } />\r\n                    <MoviePanelsToggle toggleCommentsPanel={ this.toggleCommentsPanel.bind(this) }\r\n                                       toggleVotePanel={ this.toggleVotePanel.bind(this) }\r\n                                       showCommentsPanel={ this.state.showCommentsPanel }\r\n                                       showVotePanel={ this.state.showVotePanel }\r\n                                       movieId={ this.props.movie._id } />\r\n                </div>\r\n                {this.state.showVotePanel? <MovieVotePanel movieId={ this.props.movie._id } /> : null}\r\n                {this.state.showCommentsPanel? <MovieCommentsPanel movieId={ this.props.movie._id } /> : null}\r\n                <div id=\"clear\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class MovieCommentsPanel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"list-group\">\r\n                <h3 className=\"col-sm-3\">Comments:</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router';\r\n\r\nexport default class MovieInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let genres = this.props.movie.genres.map(genre => {\r\n            return (\r\n                <strong key={ this.props.movie._id + genre }>{ genre } </strong>\r\n            );\r\n        });\r\n\r\n        return(\r\n            <div className='media-body'>\r\n                <h4 className='media-heading'>\r\n                    <Link to={`/movie/${ this.props.movie._id }/${ this.props.movie.name }`}>\r\n                        { this.props.movie.name }\r\n                    </Link>\r\n                </h4>\r\n                <small>Genres: { genres }</small>\r\n                <br />\r\n                <p>{ this.props.movie.description }</p>\r\n                <span className=\"votes\">Votes:\r\n                    <strong> { this.props.votesAmount }</strong>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router';\r\n\r\nexport default class MoviePanelToggles extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pull-right btn-group\">\r\n                <a className=\"btn btn-primary\"\r\n                   onClick={ this.props.toggleCommentsPanel }>\r\n                    { this.props.showCommentsPanel? 'Hide' : 'Comments' }\r\n                </a>\r\n                <a className=\"btn btn-primary\"\r\n                   onClick={ this.props.toggleVotePanel }>\r\n                    { this.props.showVotePanel? 'Hide' : 'Vote' }\r\n                </a>\r\n                <Link to={`/movie/${ this.props.movieId }/review/add`} className=\"btn btn-warning\">\r\n                    Write review\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class MoviePoster extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let poster;\r\n        if (this.props.posterUrl) {\r\n            poster = (\r\n                <div className='pull-left thumb-lg'>\r\n                    <img className='media-object' src={ this.props.posterUrl }/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return poster;\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class MovieVotePanel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm-4 col-xs-offset-8 list-group-item animated fadeIn vote\">\r\n                <div className=\"media\">\r\n                    <div className=\"media-body\">\r\n                        Hello from MovieVotePanel\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router';\r\n\r\nimport UserActions from '../../actions/UserActions';\r\nimport UserStore from '../../stores/UserStore';\r\n\r\nexport default class NavbarUserMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = UserStore.getState();\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        UserStore.listen(this.onChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        UserStore.unlisten(this.onChange);\r\n    }\r\n\r\n    render() {\r\n        let userMenu;\r\n        if (!this.state.loggedInUserId) {\r\n            userMenu = (\r\n                <ul className=\"nav navbar-nav pull-right\">\r\n                    <li>\r\n                        <a href=\"#\" onClick={ UserActions.loginUser }>Login</a>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/user/register\">Register</Link>\r\n                    </li>\r\n                </ul>\r\n            );\r\n        } else {\r\n            userMenu = (\r\n                <ul className=\"nav navbar-nav pull-right\">\r\n                    <li>\r\n                        <Link to={ `/user/profile/${ this.state.loggedInUserId }` }>Profile</Link>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\" onClick={ UserActions.logoutUser }>Logout</a>\r\n                    </li>\r\n                </ul>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                { userMenu }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class UserProfileInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let roles;\r\n        if (this.props.roles) {\r\n           roles = this.props.roles.map((role, index) => {\r\n                return (\r\n                    <h4 key={ index } className='lead'>\r\n                        <strong>{ role }</strong>\r\n                    </h4>\r\n                );\r\n           });\r\n        }\r\n\r\n        return (\r\n            <div className='container profile-container'>\r\n                <div className='profile-img'>\r\n                    <img src='/images/user-default.png'/>\r\n                </div>\r\n                <div className='profile-info clearfix'>\r\n                    <h2><strong>{ this.props.name }</strong></h2>\r\n                    <h4 className='lead'>Roles:</h4>\r\n                    { roles }\r\n                    <p>{ this.props.information }</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport UserRatedMoviesPanel from './UserRatedMoviesPanel';\r\n\r\nexport default class UserVotedMovies extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showRatedMoviesPanel: false\r\n        }\r\n    }\r\n\r\n    toggleRatedMovies() {\r\n        this.setState(prevState => ({\r\n            showRatedMoviesPanel: !prevState.showRatedMoviesPanel\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container profile-container\">\r\n                <div className='profile-stats clearfix'>\r\n                    <ul>\r\n                        <li>\r\n                            <span className='stats-number'>{this.props.votes? this.props.votes.length : 0 }</span>Votes\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"pull-right btn-group\">\r\n                    <a className=\"btn btn-primary\" onClick={ this.toggleRatedMovies.bind(this) }>\r\n                        { this.state.showRatedMoviesPanel? 'Hide': 'Rated Movies' }\r\n                    </a>\r\n                </div>\r\n                { this.state.showRatedMoviesPanel? <UserRatedMoviesPanel movies={ this.props.votes } /> : null }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport MovieCard from './MovieCard';\r\n\r\nexport default class UserVotedMoviesPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-group\">\r\n                Hello from UserRatedMoviesPanel\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport UserReviewsPanel from './UserReviewsPanel';\r\n\r\nexport default class UserReviews extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showReviewsPanel: false\r\n        }\r\n    }\r\n\r\n    toggleReviews() {\r\n        this.setState(prevState => ({\r\n            showReviewsPanel: !prevState.showReviewsPanel\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container profile-container\">\r\n                <div className='profile-stats clearfix'>\r\n                    <ul>\r\n                        <li>\r\n                            <span className='stats-number'>{this.props.reviews? this.props.reviews.length : 0}</span>Reviews\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"pull-right btn-group\">\r\n                    <a className=\"btn btn-primary\" onClick={ this.toggleReviews.bind(this) }>\r\n                        { this.state.showReviewsPanel? 'Hide' : 'Reviews' }\r\n                    </a>\r\n                </div>\r\n                { this.state.showReviewsPanel? <UserReviewsPanel reviews={ this.props.reviews } /> : null }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class UserReviewsPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <div className=\"list-group\">\r\n                    Hello from UserReviewsPanel\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Router from 'react-router';\r\nimport ReactDOM from 'react-dom';\r\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\r\n\r\nimport routes from './routes';\r\n\r\nlet history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>{ routes }</Router>,\r\n    document.getElementById('app')\r\n);","import React from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport App from './components/App';\r\nimport Home from './components/Home';\r\nimport MovieAdd from './components/MovieAdd';\r\nimport UserProfile from './components/UserProfile';\r\nimport UserRegister from './components/UserRegister'\r\n\r\nexport default (\r\n    <Route component={ App }>\r\n        <Route path=\"/\" component={ Home } />\r\n        <Route path=\"/movie/Add\" component={ MovieAdd } />\r\n        <Route path=\"/user/profile/:userId\" component={ UserProfile } />\r\n        <Route path=\"/user/register\" component={ UserRegister  } />\r\n    </Route>\r\n);","import alt from '../alt';\r\nimport FooterActions from '../actions/FooterActions';\r\n\r\nclass FooterStore {\r\n    constructor() {\r\n        this.bindActions(FooterActions);\r\n\r\n        this.mostRecentMovies = [];\r\n    }\r\n\r\n    onGetFiveRecentMoviesSuccess(data) {\r\n        this.mostRecentMovies = data;\r\n    }\r\n}\r\n\r\nexport default alt.createStore(FooterStore);","import alt from '../alt'\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nclass FormStore {\r\n  constructor () {\r\n    this.bindActions(FormActions)\r\n    this.bindListeners({\r\n      onRegisterUserFail: UserActions.registerUserFail,\r\n      onRegisterUserSuccess: UserActions.registerUserSuccess\r\n    })\r\n\r\n    this.username = ''\r\n    this.password = ''\r\n    this.confirmedPassword = ''\r\n    this.firstName = ''\r\n    this.lastName = ''\r\n    this.age = ''\r\n    this.gender = ''\r\n    this.formSubmitState = ''\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = ''\r\n  }\r\n\r\n  onRegisterUserSuccess () {\r\n    console.log('formStore register Success')\r\n    this.formSubmitState = 'has-success'\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = 'User register successful'\r\n  }\r\n\r\n  onRegisterUserFail (err) {\r\n    console.log('FormStore register error', err)\r\n    if (err.code === 11000) {\r\n      this.usernameValidationState = 'has-error'\r\n      this.message = 'Username already in use'\r\n      return\r\n    }\r\n\r\n    this.formSubmitState = 'has-error'\r\n    this.message = err.errmsg\r\n  }\r\n\r\n  onUsernameValidationFail () {\r\n    this.usernameValidationState = 'has-error'\r\n    this.passwordValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'Enter username'\r\n  }\r\n\r\n  onPasswordValidationFail () {\r\n    this.passwordValidationState = 'has-error'\r\n    this.usernameValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'Invalid password, or passwords do not match'\r\n  }\r\n\r\n  onHandleUsernameChange (e) {\r\n    this.username = e.target.value\r\n  }\r\n\r\n  onHandlePasswordChange (e) {\r\n    this.password = e.target.value\r\n  }\r\n\r\n  onHandleConfirmedPasswordChange (e) {\r\n    this.confirmedPassword = e.target.value\r\n  }\r\n\r\n  onHandleFirstNameChange (e) {\r\n    this.firstname = e.target.value\r\n  }\r\n\r\n  onHandleLastNameChange (e) {\r\n    console.log('here')\r\n    this.lastName = e.target.value\r\n  }\r\n\r\n  onHandleAgeChange (e) {\r\n    this.age = e.target.value\r\n  }\r\n\r\n  onHandleGenderChange (e) {\r\n    this.gender = e.target.value\r\n  }\r\n}\r\n\r\nexport default alt.createStore(FormStore)\r\n","import alt from '../alt';\r\nimport HomeActions from '../actions/HomeActions';\r\n\r\nclass HomeStore {\r\n    constructor() {\r\n        this.bindActions(HomeActions);\r\n\r\n        this.topTenMovies = [];\r\n    }\r\n\r\n    onGetTopTenMoviesSuccess(movies) {\r\n        this.topTenMovies = movies;\r\n    }\r\n\r\n    onGetTopTenMoviesFail(err) {\r\n        console.log('Could connect to DB', err);\r\n    }\r\n}\r\n\r\nexport default alt.createStore(HomeStore);\r\n","import alt from '../alt';\r\nimport MovieAddActions from '../actions/MovieAddActions';\r\nimport Helpers from '../utilities/Helpers';\r\n\r\nclass MovieAddStore {\r\n    constructor() {\r\n        this.bindActions(MovieAddActions);\r\n\r\n        this.name =  '';\r\n        this.description =  '';\r\n        this.genres =  [];\r\n        this.moviePosterUrl = '';\r\n        this.genresValidationState =  '';\r\n        this.nameValidationState =  '';\r\n        this.helpBlock =  '';\r\n    }\r\n\r\n    onAddMovieSuccess() {\r\n        console.log('Added movie!');\r\n    }\r\n\r\n    onAddMovieFail(err) {\r\n        console.log('Failed to add movie', err);\r\n    }\r\n\r\n    onGetMoviePosterSuccess(data) {\r\n        this.moviePosterUrl = data.posterUrl;\r\n    }\r\n\r\n    onGetMoviePosterFail(err) {\r\n        console.log('Could not get movie post', err);\r\n    }\r\n\r\n    onHandleNameChange(e) {\r\n        this.name = e.target.value;\r\n        this.nameValidationState =  '';\r\n        this.helpBlock =  '';\r\n    }\r\n\r\n    onHandleDescriptionChange(e) {\r\n        this.description = e.target.value;\r\n        this.genresValidationState =  '';\r\n        this.helpBlock =  '';\r\n    }\r\n\r\n    onHandleGenresChange(e) {\r\n        console.log(e);\r\n        let genreValue = e.target.value;\r\n        if (this.genres.indexOf(genreValue) === -1) {\r\n            this.genres = Helpers.appendToArray(genreValue, this.genres)\r\n        } else {\r\n            this.genres = Helpers.removeFromArray(genreValue, this.genres)\r\n        }\r\n        this.genresValidationState =  '';\r\n        this.helpBlock =  '';\r\n    }\r\n\r\n    onNameValidationFail() {\r\n        this.nameValidationState = 'has-error';\r\n        this.helpBlock = 'Enter movie name';\r\n    }\r\n\r\n    onGenresValidationFail() {\r\n        this.genresValidationState = 'has-error';\r\n        this.helpBlock = 'Select atleast one movie genre';\r\n    }\r\n}\r\n\r\nexport default alt.createStore(MovieAddStore);","import alt from '../alt';\r\nimport NavbarActions from '../actions/NavbarActions';\r\n\r\nclass NavbarStore {\r\n    constructor() {\r\n        this.bindActions(NavbarActions);\r\n\r\n        this.ajaxAnimationClass = '';\r\n    }\r\n\r\n    onUpdateAjaxAnimation(animationClass) {\r\n        this.ajaxAnimationClass = animationClass;\r\n    }\r\n}\r\n\r\nexport default alt.createStore(NavbarStore);","import alt from '../alt';\r\nimport AppActions from '../actions/UserActions';\r\n\r\nclass AppStore {\r\n    constructor() {\r\n        this.bindActions(AppActions);\r\n\r\n        this.loggedInUserId = '';\r\n        this.username =  '';\r\n        this.roles =  [];\r\n    }\r\n\r\n    onLoginUserSuccess(user) {\r\n        this.loggedInUserId = user._id;\r\n        this.username = user.username;\r\n        this.roles = user.roles;\r\n    }\r\n\r\n    onLoginUserFail() {\r\n        console.log('Failed login attempt');\r\n    }\r\n\r\n    onLogoutUserSuccess() { // Redirect on part 3\r\n        this.loggedInUserId = '';\r\n        this.username =  '';\r\n        this.roles =  [];\r\n    }\r\n}\r\n\r\nexport default alt.createStore(AppStore);","import React from 'react';\r\nimport { Link } from 'react-router';\r\n\r\nimport MovieVotePanel from '../components/sub-components/MovieVotePanel';\r\nimport MovieCommentsPanel from '../components/sub-components/MovieCommentsPanel';\r\n\r\nexport default class Helpers {\r\n\r\n    static appendToArray(value, array) {\r\n        array.push(value);\r\n\r\n        return array;\r\n    }\r\n\r\n    static prependToArray(value, array) {\r\n        array.unshift(value);\r\n\r\n        return array;\r\n    }\r\n\r\n    static removeFromArray(value, array) {\r\n        let index = array.indexOf(value);\r\n        if (index !== -1) {\r\n            array.splice(index, 1);\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    static nodesMovieCard(state, props, toggleCommentsPanel, toggleVotePanel) {\r\n        let nodes = {};\r\n        if (state.showCommentsPanel) {\r\n            nodes.commentsPanel = <MovieCommentsPanel movieId={ props.movie._id } />\r\n        }\r\n        if (state.showVotePanel) {\r\n            nodes.votePanel = <MovieVotePanel movieId={ props.movie._id } />\r\n        }\r\n\r\n        nodes.panelToggles = (\r\n            <div className=\"pull-right btn-group\">\r\n                <a className=\"btn btn-primary\"\r\n                   onClick={ toggleCommentsPanel }>\r\n                    { state.showCommentsPanel? 'Hide' : 'Comments' }\r\n                </a>\r\n                <a className=\"btn btn-primary\"\r\n                   onClick={ toggleVotePanel }>\r\n                    { state.showVotePanel? 'Hide' : 'Vote' }\r\n                </a>\r\n                <Link to={`/movie/${ props.movie._id }/review/add`} className=\"btn btn-warning\">\r\n                    Write review\r\n                </Link>\r\n            </div>\r\n        );\r\n\r\n        nodes.genres = props.movie.genres.map(genre => {\r\n            return (\r\n                <strong key={ props.movie._id + genre }>{ genre } </strong>\r\n            );\r\n        });\r\n\r\n        if (props.movie.moviePosterUrl) {\r\n            nodes.poster = (\r\n                <img className='media-object' src={ props.movie.moviePosterUrl }/>\r\n            );\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n}","const API_KEY = '71aabd79c7082bcacabc96877ac7238b';\r\nconst SEARCH_BASE_URL = 'https://api.themoviedb.org/3/search/movie';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst UNVERIFIED_MOVIE_POSTER_URL = '/images/movie-unverified.png';\r\nconst MISSING_DATA_POSTER_URL = '/images/movie-missing-data.jpg';\r\n\r\nexport default class RequesterTMDB {\r\n    static getMoviePoster(movieName) {\r\n        return new Promise((resolve, reject) => {\r\n            let request = {\r\n                method: 'get',\r\n                url: `${SEARCH_BASE_URL}?api_key=${API_KEY}&query=${movieName}`\r\n            };\r\n            $.ajax(request)\r\n                .done(tmdbResponse => {\r\n                    console.log('TMDB response', tmdbResponse);\r\n                    if (tmdbResponse.total_results === 0) {\r\n                        resolve({ posterUrl: UNVERIFIED_MOVIE_POSTER_URL });\r\n                        return;\r\n                    }\r\n\r\n                    let posterPath = tmdbResponse.results[0].poster_path;\r\n                    if (posterPath === null) {\r\n                        resolve({ posterUrl: MISSING_DATA_POSTER_URL });\r\n                        return;\r\n                    }\r\n                    resolve({ posterUrl: `${ POSTER_BASE_URL }/${ posterPath }` });\r\n                })\r\n                .fail(err => {\r\n                    reject({\r\n                        clientMessage: 'Request failed',\r\n                        error: err\r\n                    });\r\n                });\r\n        });\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}